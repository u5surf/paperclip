initSidebarItems({"constant":[["DUMMY_SP","Dummy span, both position and length are zero, syntax context is zero as well. This span is kept inline and encoded with format 0."],["NO_EXPANSION",""],["SPAN_DEBUG",""]],"enum":[["ExternalSource","The state of the lazy external source loading mechanism of a `SourceFile`."],["FileName","Differentiates between real files and common virtual files."],["NonNarrowChar","Identifies an offset of a non-narrow character in a `SourceFile`."],["SpanLinesError",""],["SpanSnippetError",""]],"fn":[["default_span_debug",""]],"mod":[["edition",""],["hygiene","Machinery for hygienic macros, inspired by the `MTWT[1]` paper."],["symbol","An \"interner\" is a data structure that associates values with usize tags and allows bidirectional lookup; i.e., given a value, one can easily find the type, and vice versa."]],"static":[["GLOBALS",""]],"struct":[["BytePos","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them."],["CharPos","A character offset. Because of multibyte UTF-8 characters, a byte offset is not equivalent to a character offset. The `SourceMap` will convert `BytePos` values to `CharPos` values as necessary."],["DistinctSources",""],["FileLines",""],["Globals",""],["LineInfo",""],["Loc","A source code location used for error reporting."],["LocWithOpt","A source code location used as the result of `lookup_char_pos_adj`."],["MacroBacktrace",""],["MalformedSourceMapPositions",""],["MultiByteChar","Identifies an offset of a multi-byte character in a `SourceFile`."],["MultiSpan","A collection of spans. Spans have two orthogonal attributes:"],["SourceFile","A single source in the `SourceMap`."],["SourceFileAndBytePos",""],["SourceFileAndLine",""],["Span","A compressed span. Contains either fields of `SpanData` inline if they are small, or index into span interner. The primary goal of `Span` is to be as small as possible and fit into other structures (that's why it uses `packed` as well). Decoding speed is the second priority. See `SpanData` for the info on span fields in decoded representation."],["SpanData","Spans represent a region of code, used for error reporting. Positions in spans are absolute positions from the beginning of the source_map, not positions relative to `SourceFile`s. Methods on the `SourceMap` can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in source_map and you cannot assume that the length of the `span = hi - lo`; there may be space in the `BytePos` range between files."],["SpanLabel",""]],"trait":[["Pos",""]],"type":[["FileLinesResult",""]]});